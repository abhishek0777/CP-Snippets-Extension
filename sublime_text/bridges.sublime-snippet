#include<iostream>             
#include<vector>   
#include<bits/stdc++.h>
#define mod 1000000007
#define pi 3.14159265358979
#define  PRE(x,p) cout<<setprecision(x)<<p; 
#define pb push_back
#define mp make_pair
#define f first
#define s second
#define endl "\n"
#define high INT_MAX
#define low INT_MIN
#define ll long long int

using namespace std;


void showa(ll a[],ll n){ for(ll i=1;i<=n;i++) cout<<a[i]<<' ';  cout<<endl;  }
void showv(vector<ll>v){ for(ll i=0;i<v.size();i++) cout<<v[i]<<' '; cout<<endl;}

vector<ll>vec[200005];
map<pair<ll,ll>,ll>edges;
set<pair<ll,ll>>bridges;   //finding bridges in a graph
ll vis[200005],tin[200005],tout[200005],dp[200005];
ll timer,f=0;
bool isansestor(ll u,ll v) // find out if u is ansestor of v or not
{
return tin[u]<=tin[v] && tout[u]>=tout[v];
}
void dfs(ll u)
{
   ll j,v;
   tin[u]=timer++;
   vis[u]=true;
   for(j=0;j<vec[u].size();j++)
   {
      v=vec[u][j];
      if(vis[v]) continue;
      edges[{u,v}]=1;
      edges[{v,u}]=1;
      dfs(v);
   }
   tout[u]=timer++;

}
void dfs2(ll u,ll p)  //to find a bridge
{
   ll j,v;
   vis[u]=true;
   ll goingup=0,goingdown=0;
   for(j=0;j<vec[u].size();j++)
   {
      v=vec[u][j];
      if(v==p) continue;
      if(edges.count({u,v})>0 || edges.count({v,u})>0) 
      continue;

      if(isansestor(u,v)) { goingdown++;}
      if(isansestor(v,u)) { goingup++;}
      
     
   }
   for(j=0;j<vec[u].size();j++)
   {
      v=vec[u][j];
      if(vis[v]) continue;
      dfs2(v,u);
      dp[u]+=dp[v];
      
   }
   dp[u]=dp[u]+goingup-goingdown;

  if(dp[u]==0 && u!=1) bridges.insert({min(u,p),max(u,p)});

}
void solve() 
{ 
   ll n,i,m;
   timer=1;
   cin>>n>>m;
   bridges.clear();
   edges.clear();
   for(i=1;i<=n;i++)
   {
      dp[i]=0;
      vec[i].clear();
      vis[i]=0;
   }

   for(i=1;i<=m;i++)
   {
      ll u,v;
      cin>>u>>v;
      vec[u].pb(v);
      vec[v].pb(u);
   }
   dfs(1);
   // for(auto it:edges)    //spannig edges
   // {
   //    if(it.f.f<it.f.s)
   //    cout<<it.f.f<<' '<<it.f.s<<endl;
   // }
   memset(vis,0,sizeof(vis));
   dfs2(1,0);


   cout<<bridges.size()<<endl;
   for(auto it:bridges)
      cout<<it.f<<' '<<it.s<<endl;
   cout<<endl;


}
int main()
{
 #ifndef ONLINE_JUDGE
 freopen("input.txt", "r", stdin);
 freopen("output.txt", "w", stdout);
 #endif
ios_base::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);

ll t=1;
cin>>t;
for(ll test=1;test<=t;test++)
{
    // cout<<"Caso #"<<test<<endl;
    solve();
}

return 0;
}
